// This file was generated automatically by qldds_gensrc.py.  If you edit this file
// manually then your changes will be lost the next time gensrc runs.

// This source code file was generated from the following stub:
//      Users/mkipnis/qldds/gensrc/stubs/stub.opendds.mpc.datareader

//
//   Copyright (C) 2015 Mike Kipnis

//   This file is part of QLDDS, a free-software/open-source library
//   for utilization of QuantLib in the distributed envrionment via DDS.

//   QLDDS is free software: you can redistribute it and/or modify it
//   under the terms of the QLDDS license.  You should have received a
//   copy of the license along with this program; if not, please email
//   <dev@qldds.org>. The license is also available online at
//   <http://qldds.org/qldds-license/>.

//   This program is distributed in the hope that it will be useful, but WITHOUT
//   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
//   FOR A PARTICULAR PURPOSE.  See the license for more details.
//


project(garbagecollectionDefaultDataReader) : dcps, install {

  after    += *garbagecollection

  sharedname     = garbagecollectionDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils garbagecollection 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	garbagecollectionDataReaderListenerImpl.hpp

  }

  Source_Files {
         	garbagecollectionDataReaderListenerImpl.cpp

  }

}

project(loggingDefaultDataReader) : dcps, install {

  after    += *logging

  sharedname     = loggingDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils logging 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	loggingDataReaderListenerImpl.hpp

  }

  Source_Files {
         	loggingDataReaderListenerImpl.cpp

  }

}

project(ohutilsDefaultDataReader) : dcps, install {

  after    += *ohutils

  sharedname     = ohutilsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils ohutils 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	ohutilsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	ohutilsDataReaderListenerImpl.cpp

  }

}

project(serializationDefaultDataReader) : dcps, install {

  after    += *serialization

  sharedname     = serializationDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils serialization 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	serializationDataReaderListenerImpl.hpp

  }

  Source_Files {
         	serializationDataReaderListenerImpl.cpp

  }

}

project(valueobjectsDefaultDataReader) : dcps, install {

  after    += *valueobjects

  sharedname     = valueobjectsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils valueobjects 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	valueobjectsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	valueobjectsDataReaderListenerImpl.cpp

  }

}

project(abcdDefaultDataReader) : dcps, install {

  after    += *abcd

  sharedname     = abcdDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils abcd 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	abcdDataReaderListenerImpl.hpp

  }

  Source_Files {
         	abcdDataReaderListenerImpl.cpp

  }

}

project(accountingenginesDefaultDataReader) : dcps, install {

  after    += *accountingengines

  sharedname     = accountingenginesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils accountingengines 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	accountingenginesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	accountingenginesDataReaderListenerImpl.cpp

  }

}

project(alphaformDefaultDataReader) : dcps, install {

  after    += *alphaform

  sharedname     = alphaformDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils alphaform 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	alphaformDataReaderListenerImpl.hpp

  }

  Source_Files {
         	alphaformDataReaderListenerImpl.cpp

  }

}

project(assetswapDefaultDataReader) : dcps, install {

  after    += *assetswap

  sharedname     = assetswapDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils assetswap 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	assetswapDataReaderListenerImpl.hpp

  }

  Source_Files {
         	assetswapDataReaderListenerImpl.cpp

  }

}

project(bondsDefaultDataReader) : dcps, install {

  after    += *bonds

  sharedname     = bondsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils bonds 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	bondsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	bondsDataReaderListenerImpl.cpp

  }

}

project(browniangeneratorsDefaultDataReader) : dcps, install {

  after    += *browniangenerators

  sharedname     = browniangeneratorsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils browniangenerators 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	browniangeneratorsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	browniangeneratorsDataReaderListenerImpl.cpp

  }

}

project(btpDefaultDataReader) : dcps, install {

  after    += *btp

  sharedname     = btpDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils btp 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	btpDataReaderListenerImpl.hpp

  }

  Source_Files {
         	btpDataReaderListenerImpl.cpp

  }

}

project(capfloorDefaultDataReader) : dcps, install {

  after    += *capfloor

  sharedname     = capfloorDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils capfloor 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	capfloorDataReaderListenerImpl.hpp

  }

  Source_Files {
         	capfloorDataReaderListenerImpl.cpp

  }

}

project(capletvolstructureDefaultDataReader) : dcps, install {

  after    += *capletvolstructure

  sharedname     = capletvolstructureDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils capletvolstructure 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	capletvolstructureDataReaderListenerImpl.hpp

  }

  Source_Files {
         	capletvolstructureDataReaderListenerImpl.cpp

  }

}

project(cmsmarketDefaultDataReader) : dcps, install {

  after    += *cmsmarket

  sharedname     = cmsmarketDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils cmsmarket 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	cmsmarketDataReaderListenerImpl.hpp

  }

  Source_Files {
         	cmsmarketDataReaderListenerImpl.cpp

  }

}

project(correlationDefaultDataReader) : dcps, install {

  after    += *correlation

  sharedname     = correlationDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils correlation 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	correlationDataReaderListenerImpl.hpp

  }

  Source_Files {
         	correlationDataReaderListenerImpl.cpp

  }

}

project(couponvectorsDefaultDataReader) : dcps, install {

  after    += *couponvectors

  sharedname     = couponvectorsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils couponvectors 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	couponvectorsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	couponvectorsDataReaderListenerImpl.cpp

  }

}

project(creditDefaultDataReader) : dcps, install {

  after    += *credit

  sharedname     = creditDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils credit 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	creditDataReaderListenerImpl.hpp

  }

  Source_Files {
         	creditDataReaderListenerImpl.cpp

  }

}

project(ctsmmcapletcalibrationDefaultDataReader) : dcps, install {

  after    += *ctsmmcapletcalibration

  sharedname     = ctsmmcapletcalibrationDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils ctsmmcapletcalibration 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	ctsmmcapletcalibrationDataReaderListenerImpl.hpp

  }

  Source_Files {
         	ctsmmcapletcalibrationDataReaderListenerImpl.cpp

  }

}

project(curvestateDefaultDataReader) : dcps, install {

  after    += *curvestate

  sharedname     = curvestateDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils curvestate 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	curvestateDataReaderListenerImpl.hpp

  }

  Source_Files {
         	curvestateDataReaderListenerImpl.cpp

  }

}

project(defaulttermstructuresDefaultDataReader) : dcps, install {

  after    += *defaulttermstructures

  sharedname     = defaulttermstructuresDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils defaulttermstructures 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	defaulttermstructuresDataReaderListenerImpl.hpp

  }

  Source_Files {
         	defaulttermstructuresDataReaderListenerImpl.cpp

  }

}

project(evolutiondescriptionDefaultDataReader) : dcps, install {

  after    += *evolutiondescription

  sharedname     = evolutiondescriptionDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils evolutiondescription 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	evolutiondescriptionDataReaderListenerImpl.hpp

  }

  Source_Files {
         	evolutiondescriptionDataReaderListenerImpl.cpp

  }

}

project(exerciseDefaultDataReader) : dcps, install {

  after    += *exercise

  sharedname     = exerciseDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils exercise 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	exerciseDataReaderListenerImpl.hpp

  }

  Source_Files {
         	exerciseDataReaderListenerImpl.cpp

  }

}

project(forwardrateagreementDefaultDataReader) : dcps, install {

  after    += *forwardrateagreement

  sharedname     = forwardrateagreementDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils forwardrateagreement 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	forwardrateagreementDataReaderListenerImpl.hpp

  }

  Source_Files {
         	forwardrateagreementDataReaderListenerImpl.cpp

  }

}

project(handlesDefaultDataReader) : dcps, install {

  after    += *handles

  sharedname     = handlesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils handles 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	handlesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	handlesDataReaderListenerImpl.cpp

  }

}

project(qlIndexDefaultDataReader) : dcps, install {

  after    += *qlIndex

  sharedname     = qlIndexDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils qlIndex 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	qlIndexDataReaderListenerImpl.hpp

  }

  Source_Files {
         	qlIndexDataReaderListenerImpl.cpp

  }

}

project(instrumentsDefaultDataReader) : dcps, install {

  after    += *instruments

  sharedname     = instrumentsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils instruments 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	instrumentsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	instrumentsDataReaderListenerImpl.cpp

  }

}

project(interpolationDefaultDataReader) : dcps, install {

  after    += *interpolation

  sharedname     = interpolationDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils interpolation 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	interpolationDataReaderListenerImpl.hpp

  }

  Source_Files {
         	interpolationDataReaderListenerImpl.cpp

  }

}

project(legDefaultDataReader) : dcps, install {

  after    += *leg

  sharedname     = legDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils leg 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	legDataReaderListenerImpl.hpp

  }

  Source_Files {
         	legDataReaderListenerImpl.cpp

  }

}

project(marketmodelevolversDefaultDataReader) : dcps, install {

  after    += *marketmodelevolvers

  sharedname     = marketmodelevolversDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils marketmodelevolvers 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	marketmodelevolversDataReaderListenerImpl.hpp

  }

  Source_Files {
         	marketmodelevolversDataReaderListenerImpl.cpp

  }

}

project(marketmodelsDefaultDataReader) : dcps, install {

  after    += *marketmodels

  sharedname     = marketmodelsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils marketmodels 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	marketmodelsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	marketmodelsDataReaderListenerImpl.cpp

  }

}

project(optimizationDefaultDataReader) : dcps, install {

  after    += *optimization

  sharedname     = optimizationDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils optimization 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	optimizationDataReaderListenerImpl.hpp

  }

  Source_Files {
         	optimizationDataReaderListenerImpl.cpp

  }

}

project(optionsDefaultDataReader) : dcps, install {

  after    += *options

  sharedname     = optionsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils options 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	optionsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	optionsDataReaderListenerImpl.cpp

  }

}

project(overnightindexedswapDefaultDataReader) : dcps, install {

  after    += *overnightindexedswap

  sharedname     = overnightindexedswapDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils overnightindexedswap 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	overnightindexedswapDataReaderListenerImpl.hpp

  }

  Source_Files {
         	overnightindexedswapDataReaderListenerImpl.cpp

  }

}

project(payoffsDefaultDataReader) : dcps, install {

  after    += *payoffs

  sharedname     = payoffsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils payoffs 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	payoffsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	payoffsDataReaderListenerImpl.cpp

  }

}

project(piecewiseyieldcurveDefaultDataReader) : dcps, install {

  after    += *piecewiseyieldcurve

  sharedname     = piecewiseyieldcurveDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils piecewiseyieldcurve 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	piecewiseyieldcurveDataReaderListenerImpl.hpp

  }

  Source_Files {
         	piecewiseyieldcurveDataReaderListenerImpl.cpp

  }

}

project(pricingenginesDefaultDataReader) : dcps, install {

  after    += *pricingengines

  sharedname     = pricingenginesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils pricingengines 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	pricingenginesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	pricingenginesDataReaderListenerImpl.cpp

  }

}

project(processesDefaultDataReader) : dcps, install {

  after    += *processes

  sharedname     = processesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils processes 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	processesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	processesDataReaderListenerImpl.cpp

  }

}

project(productsDefaultDataReader) : dcps, install {

  after    += *products

  sharedname     = productsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils products 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	productsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	productsDataReaderListenerImpl.cpp

  }

}

project(quotesDefaultDataReader) : dcps, install {

  after    += *quotes

  sharedname     = quotesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils quotes 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	quotesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	quotesDataReaderListenerImpl.cpp

  }

}

project(randomsequencegeneratorDefaultDataReader) : dcps, install {

  after    += *randomsequencegenerator

  sharedname     = randomsequencegeneratorDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils randomsequencegenerator 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	randomsequencegeneratorDataReaderListenerImpl.hpp

  }

  Source_Files {
         	randomsequencegeneratorDataReaderListenerImpl.cpp

  }

}

project(rangeaccrualDefaultDataReader) : dcps, install {

  after    += *rangeaccrual

  sharedname     = rangeaccrualDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils rangeaccrual 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	rangeaccrualDataReaderListenerImpl.hpp

  }

  Source_Files {
         	rangeaccrualDataReaderListenerImpl.cpp

  }

}

project(ratehelpersDefaultDataReader) : dcps, install {

  after    += *ratehelpers

  sharedname     = ratehelpersDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils ratehelpers 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	ratehelpersDataReaderListenerImpl.hpp

  }

  Source_Files {
         	ratehelpersDataReaderListenerImpl.cpp

  }

}

project(scheduleDefaultDataReader) : dcps, install {

  after    += *schedule

  sharedname     = scheduleDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils schedule 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	scheduleDataReaderListenerImpl.hpp

  }

  Source_Files {
         	scheduleDataReaderListenerImpl.cpp

  }

}

project(sequencestatisticsDefaultDataReader) : dcps, install {

  after    += *sequencestatistics

  sharedname     = sequencestatisticsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils sequencestatistics 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	sequencestatisticsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	sequencestatisticsDataReaderListenerImpl.cpp

  }

}

project(settingsDefaultDataReader) : dcps, install {

  after    += *settings

  sharedname     = settingsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils settings 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	settingsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	settingsDataReaderListenerImpl.cpp

  }

}

project(shortratemodelsDefaultDataReader) : dcps, install {

  after    += *shortratemodels

  sharedname     = shortratemodelsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils shortratemodels 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	shortratemodelsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	shortratemodelsDataReaderListenerImpl.cpp

  }

}

project(smilesectionDefaultDataReader) : dcps, install {

  after    += *smilesection

  sharedname     = smilesectionDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils smilesection 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	smilesectionDataReaderListenerImpl.hpp

  }

  Source_Files {
         	smilesectionDataReaderListenerImpl.cpp

  }

}

project(statisticsDefaultDataReader) : dcps, install {

  after    += *statistics

  sharedname     = statisticsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils statistics 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	statisticsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	statisticsDataReaderListenerImpl.cpp

  }

}

project(swapDefaultDataReader) : dcps, install {

  after    += *swap

  sharedname     = swapDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils swap 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	swapDataReaderListenerImpl.hpp

  }

  Source_Files {
         	swapDataReaderListenerImpl.cpp

  }

}

project(swaptionDefaultDataReader) : dcps, install {

  after    += *swaption

  sharedname     = swaptionDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils swaption 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	swaptionDataReaderListenerImpl.hpp

  }

  Source_Files {
         	swaptionDataReaderListenerImpl.cpp

  }

}

project(swaptionvolstructureDefaultDataReader) : dcps, install {

  after    += *swaptionvolstructure

  sharedname     = swaptionvolstructureDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils swaptionvolstructure 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	swaptionvolstructureDataReaderListenerImpl.hpp

  }

  Source_Files {
         	swaptionvolstructureDataReaderListenerImpl.cpp

  }

}

project(termstructuresDefaultDataReader) : dcps, install {

  after    += *termstructures

  sharedname     = termstructuresDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils termstructures 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	termstructuresDataReaderListenerImpl.hpp

  }

  Source_Files {
         	termstructuresDataReaderListenerImpl.cpp

  }

}

project(timeseriesDefaultDataReader) : dcps, install {

  after    += *timeseries

  sharedname     = timeseriesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils timeseries 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	timeseriesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	timeseriesDataReaderListenerImpl.cpp

  }

}

project(utilitiesDefaultDataReader) : dcps, install {

  after    += *utilities

  sharedname     = utilitiesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils utilities 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	utilitiesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	utilitiesDataReaderListenerImpl.cpp

  }

}

project(vanillaswapDefaultDataReader) : dcps, install {

  after    += *vanillaswap

  sharedname     = vanillaswapDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils vanillaswap 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	vanillaswapDataReaderListenerImpl.hpp

  }

  Source_Files {
         	vanillaswapDataReaderListenerImpl.cpp

  }

}

project(volatilitiesDefaultDataReader) : dcps, install {

  after    += *volatilities

  sharedname     = volatilitiesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils volatilities 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	volatilitiesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	volatilitiesDataReaderListenerImpl.cpp

  }

}

project(volatilityDefaultDataReader) : dcps, install {

  after    += *volatility

  sharedname     = volatilityDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  libout         = .
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils volatility 

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	volatilityDataReaderListenerImpl.hpp

  }

  Source_Files {
         	volatilityDataReaderListenerImpl.cpp

  }

}


