/*
   Copyright (C) 2015 Mike Kipnis

   This file is part of QLDDS, a free-software/open-source library
   for utilization of QuantLib in the distributed envrionment via DDS.

   QLDDS is free software: you can redistribute it and/or modify it
   under the terms of the QLDDS license.  You should have received a
   copy of the license along with this program; if not, please email
   <dev@qldds.org>. The license is also available online at
   <http://qldds.org/qldds-license/>.

   This program is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
   FOR A PARTICULAR PURPOSE.  See the license for more details.
*/
// This file was generated automatically by qldds_gensrc.py.  If you edit this file
// manually then your changes will be lost the next time gensrc runs.

// This source code file was generated from the following stub:
//      Users/mkipnis/qldds/gensrc/stubs/stub.opendds.module

#ifndef btp_IDL
#define btp_IDL

#include <qldds_types.idl>

module btp {

#pragma DCPS_DATA_TYPE "btp::qlBTP"
#pragma DCPS_DATA_KEY "btp::qlBTP instanceID" 

   struct qlBTP { 
          string instanceID;
          
             string ObjectId;
             string Description;
             string MaturityDate;
             double Coupon;
             string StartDate;
             string IssueDate;
             boolean Permanent;
             boolean Trigger;
             boolean Overwrite; 
   };

#pragma DCPS_DATA_TYPE "btp::qlBTP2"
#pragma DCPS_DATA_KEY "btp::qlBTP2 instanceID" 

   struct qlBTP2 { 
          string instanceID;
          
             string ObjectId;
             string Description;
             string MaturityDate;
             double Coupon;
             double Redemption;
             string StartDate;
             string IssueDate;
             boolean Permanent;
             boolean Trigger;
             boolean Overwrite; 
   };

#pragma DCPS_DATA_TYPE "btp::qlCCTEU"
#pragma DCPS_DATA_KEY "btp::qlCCTEU instanceID" 

   struct qlCCTEU { 
          string instanceID;
          
             string ObjectId;
             string Description;
             string MaturityDate;
             double Spread;
             string FwdCurve;
             string StartDate;
             string IssueDate;
             boolean Permanent;
             boolean Trigger;
             boolean Overwrite; 
   };

#pragma DCPS_DATA_TYPE "btp::qlRendistatoBasket"
#pragma DCPS_DATA_KEY "btp::qlRendistatoBasket instanceID" 

   struct qlRendistatoBasket { 
          string instanceID;
          
             string ObjectId;
             qldds_utils::StringSeq BTPs;
             qldds_utils::DoubleSeq Outstandings;
             qldds_utils::DoubleSeq Prices;
             boolean Permanent;
             boolean Trigger;
             boolean Overwrite; 
   };

#pragma DCPS_DATA_TYPE "btp::qlRendistatoCalculator"
#pragma DCPS_DATA_KEY "btp::qlRendistatoCalculator instanceID" 

   struct qlRendistatoCalculator { 
          string instanceID;
          
             string ObjectId;
             string RendistatoBasket;
             string Euribor;
             string YieldCurve;
             boolean Permanent;
             boolean Trigger;
             boolean Overwrite; 
   };

#pragma DCPS_DATA_TYPE "btp::qlRendistatoEquivalentSwapLengthQuote"
#pragma DCPS_DATA_KEY "btp::qlRendistatoEquivalentSwapLengthQuote instanceID" 

   struct qlRendistatoEquivalentSwapLengthQuote { 
          string instanceID;
          
             string ObjectId;
             string RendistatoCalculator;
             boolean Permanent;
             boolean Trigger;
             boolean Overwrite; 
   };

#pragma DCPS_DATA_TYPE "btp::qlRendistatoEquivalentSwapSpreadQuote"
#pragma DCPS_DATA_KEY "btp::qlRendistatoEquivalentSwapSpreadQuote instanceID" 

   struct qlRendistatoEquivalentSwapSpreadQuote { 
          string instanceID;
          
             string ObjectId;
             string RendistatoCalculator;
             boolean Permanent;
             boolean Trigger;
             boolean Overwrite; 
   };
};

#endif
