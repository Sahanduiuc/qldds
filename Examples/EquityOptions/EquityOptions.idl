
/*
   Copyright (C) 2016 Mike Kipnis

   This file is part of QLDDS, a free-software/open-source library
   for utilization of QuantLib in the distributed envrionment via DDS.

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
*/


#ifndef EQUITY_OPTIONS_IDL
#define EQUITY_OPTIONS_IDL 

#include <volatilities.idl>
#include <processes.idl>
#include <payoffs.idl>
#include <exercise.idl>
#include <pricingengines.idl>
#include <options.idl>

#pragma DCPS_DATA_TYPE "qlBlackConstantVols"
#pragma DCPS_DATA_KEY "qlBlackConstantVols ticker"

typedef sequence < volatilities::qlBlackConstantVol > qlBlackConstantVolSeq; 
typedef sequence < qlBlackConstantVolSeq > qlBlackConstantVolMatrix;

struct qlBlackConstantVols
{
  string ticker;

  qlBlackConstantVolMatrix putVols;
  qlBlackConstantVolMatrix callVols;
};


#pragma DCPS_DATA_TYPE "qlGeneralizedBlackScholesProcesses"
#pragma DCPS_DATA_KEY "qlGeneralizedBlackScholesProcesses ticker"

struct qlGeneralizedBlackScholesProcesses
{
  string ticker;

  processes::qlGeneralizedBlackScholesProcess process;
};


#pragma DCPS_DATA_TYPE "qlStrikedTypePayoffs"
#pragma DCPS_DATA_KEY "qlStrikedTypePayoffs ticker"

typedef sequence < payoffs::qlStrikedTypePayoff > qlStrikedTypePayoffSeq; 

struct qlStrikedTypePayoffs 
{
  string ticker;

  qlStrikedTypePayoffSeq callPayoffs;
  qlStrikedTypePayoffSeq putPayoffs;
};


#pragma DCPS_DATA_TYPE "qlEuropeanExercises"
#pragma DCPS_DATA_KEY "qlEuropeanExercises ticker"

typedef sequence < exercise::qlEuropeanExercise > qlEuropeanExerciseSeq;

struct qlEuropeanExercises
{
  string ticker;

  qlEuropeanExerciseSeq exercises;
};

#pragma DCPS_DATA_TYPE "StraddleSetup"
#pragma DCPS_DATA_KEY "StraddleSetup ticker"

struct StraddleSetup 
{
  string ticker;

  qlBlackConstantVolMatrix putVols;
  qlBlackConstantVolMatrix callVols;

  qlStrikedTypePayoffSeq putPayoffs;
  qlStrikedTypePayoffSeq callPayoffs;

  processes::qlGeneralizedBlackScholesProcess process;


  qlEuropeanExerciseSeq exercises;
};

#endif
